#!/usr/bin/env python
import sys
import os
from shlex import quote
import glob
import re
import subprocess
from pathlib import Path
from urllib.parse import unquote


class PathLibX:
    home = os.getenv('HOME')

    @classmethod
    def unix(cls, path):
        path = cls.unix_home(path)
        return cls.unix_star(path)

    @classmethod
    def unix_home(cls, path: str):
        if path.find('~') == 0:
            return cls.join(os.getenv('HOME'), path[1:])
        else:
            return path

    @classmethod
    def unix_star(cls, path):
        if path.find('*') != -1:
            return glob.glob(path)
        return [path]

    @staticmethod
    def join(*paths: str):
        out = []
        paths_len = len(paths)
        for index, path in enumerate(paths):
            path: str
            if not path:
                continue
            path = path.rstrip('/') if index + 1 != paths_len else path
            path = path.lstrip('/') if index != 0 else path
            out.append(path)

        return '/'.join(out)

    @staticmethod
    def end_slash(path: str):
        return path if path[-1] == '/' else path + '/'

    @staticmethod
    def del_end_slash(path: str):
        return path.rstrip('/')

    @staticmethod
    def get_parent(path: str) -> str:
        if path == '/':
            return ''
        elif parent := re.match(r'(^.+?)\/(?=[^\/]+\/?$)', path):
            return parent.groups()[0]
        elif re.match(r'/[^/]+', path):
            return '/'
        return ''

    @classmethod
    def relative_path(cls, path: str, pwd: str):
        if path.find('/') == 0:
            return path
        if path.find('../') == 0:
            if parent := cls.get_parent(pwd):
                return cls.relative_path(path[3:], parent)
        else:
            return cls.join(pwd, path)

    @staticmethod
    def is_image(path):
        return bool(re.match(r'.+\.(png|ico|svg|jpg)$', path))

    @classmethod
    def get_name(cls, path, full=False):
        if full:
            for item in re.findall(r'(/)?([^/]+)(/)?$', path):
                return item[1]
        else:
            if data := re.match(r'^.*?([^\/]+?)(\.([^\/.]+))?$', path):
                return data.groups()[0]
        return ''

    @classmethod
    def get_children(cls, *paths, recursive=False, time_sort=False, only_files=False, only_folders=False):
        out = []
        for path in paths:
            if not os.path.exists(path):
                continue
            path: str = cls.end_slash(path)
            files: list

            if time_sort:
                files = [str(x) for x in sorted(
                    Path(path).iterdir(), key=os.path.getmtime)]
            else:
                files = [cls.join(path, x) for x in os.listdir(path)]

            for path_ in files:
                if only_files:
                    if os.path.isfile(path_):
                        out.append(path_)
                elif only_folders:
                    if os.path.isdir(path_):
                        out.append(path_)
                else:
                    out.append(path_)

                if os.path.isdir(path_) and recursive:
                    out.extend(cls.get_children(path_, recursive=recursive, time_sort=time_sort, only_files=only_files,
                                                only_folders=only_folders))
        return out

    @classmethod
    def get_children_iter(cls, *paths, recursive=False, time_sort=False, only_files=False, only_folders=False):
        out = []
        for path in filter(os.path.exists, paths):
            path: str = cls.end_slash(path)

            child_paths = (cls.join(path, x) for x in os.listdir(path))

            if time_sort:
                child_paths = (str(x) for x in sorted(
                    child_paths, key=os.path.getmtime))

            for path_ in child_paths:
                if only_files:
                    if os.path.isfile(path_):
                        yield path_
                elif only_folders:
                    if os.path.isdir(path_):
                        yield path_
                else:
                    yield path_

                if os.path.isdir(path_) and recursive:
                    yield from cls.get_children(path_, recursive=recursive, time_sort=time_sort, only_files=only_files,
                                                only_folders=only_folders)
        return out

    @classmethod
    def get_extension(cls, path, lower=False):
        if data := re.match(r'^.*?([^\/]+?)(\.([^\/.]+))?$', path):
            if ext := data.groups()[2]:
                return ext.lower() if lower else ext
        return ''

    @staticmethod
    def get_extensions(path):
        if math := re.findall(r'(?<=\w)\.[^\/]+$', path):
            return list(filter(lambda item: item if item else None, math[0].split('.')))
        return []

    @staticmethod
    def open_file(path):
        subprocess.Popen(f'xdg-open {quote(path)}', shell=True,
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    @staticmethod
    def safe_path_duplicate(path):
        "Функция для защиты от совпадения имен"
        if not os.path.exists(path):
            return path
        is_dir = os.path.isdir(path)

        if is_dir:
            extension, name_and_path = None, None
        else:
            dot_cut = path.split('/')[-1].split('.')
            extension = dot_cut[-1] if len(dot_cut) > 1 else ''
            name_and_path = path[:-len(extension) - 1]

        new_path, index = path, 1
        while True:
            if is_dir or not extension:
                new_path = f'{path}_{index}'
            else:
                new_path = f'{name_and_path}_{index}.{extension}'
            if not os.path.exists(new_path):
                return new_path
            index += 1

    @classmethod
    def create_folder(cls, path, recursive=True):
        if os.path.exists(path):
            return True
        parent = os.path.dirname(path)
        parent_exists = os.path.exists(parent)
        if not parent_exists and recursive:
            cls.create_folder(parent, recursive)
        elif not parent_exists:
            raise NotADirectoryError
        os.mkdir(path)
        return True

    @classmethod
    def move(cls, file_path, new_path=None, folder=None, new_name=None, safe_path=True):
        if file_path == new_name:
            return file_path

        if new_path:
            move_path = new_path
        elif folder:
            move_path = cls.join(folder, cls.get_name(file_path, full=True))
        elif new_name:
            move_path = cls.join(cls.get_parent(file_path), new_name)
        else:
            raise ValueError('Не задан путь перемещения')

        if safe_path:
            move_path = cls.safe_path_duplicate(move_path)
        cls.create_folder(cls.get_parent(move_path), recursive=True)
        os.rename(file_path, move_path)

        return move_path

    @staticmethod
    def get_mime_type(path):
        x = os.popen(f'file --mime-type {quote(path)}')
        string = x.read()
        return string[string.find(':') + 2:-1]

    @classmethod
    def fix(cls, path):
        path_new = cls.fix_procent(path)
        if path != path_new:
            cls.move(path, path_new)
        return path

    @classmethod
    def fix_procent(cls, path_):
        name = cls.get_name(path_)
        ext = cls.get_extension(path_)
        ext = '.' + ext if ext else ''

        folder = cls.get_parent(path_)
        while True:
            name_cache = unquote(name)
            if name_cache == name:
                break
            name = name_cache
        return cls.join(folder, name + ext)

    @classmethod
    def set_extension(cls, path: str, ext: str):
        ext_old = cls.get_extension(path)
        path = path[:-len(ext_old) - 1] if ext_old else path
        return path + ('' if path[-1] == '.' else '.') + ext

    @classmethod
    def set_folder(cls, path: str, folder: str):
        return cls.join(folder, cls.get_name(path, full=True))


for file in sys.argv[1:]:
    ext = PathLibX.get_extension(file, lower=True)
    print(ext == 'eps', ext == 'ai')

    tmp = PathLibX.set_extension(file, 'pdf')
    result = PathLibX.set_extension(file, 'svg')

    if os.path.exists(tmp) or os.path.exists(result):
        continue

    if ext == 'eps':
        os.system(f'epstopdf {quote(file)}')
    elif ext == 'ai':
        os.system(
            f'gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile={quote(tmp)} {quote(file)}')
    else:
        raise ValueError
    os.system(f'pdf2svg {quote(tmp)} {quote(result)}')
    os.remove(tmp)
    # os.system(f'gzip -S z {quote(result)}')
